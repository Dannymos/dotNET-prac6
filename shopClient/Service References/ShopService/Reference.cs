//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShopClient.ShopService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ShopService.IShopService")]
    public interface IShopService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/getAllProducts", ReplyAction="http://tempuri.org/IShopService/getAllProductsResponse")]
        ShopLibrary.Product[] getAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/getAllProducts", ReplyAction="http://tempuri.org/IShopService/getAllProductsResponse")]
        System.Threading.Tasks.Task<ShopLibrary.Product[]> getAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/register", ReplyAction="http://tempuri.org/IShopService/registerResponse")]
        bool register(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/register", ReplyAction="http://tempuri.org/IShopService/registerResponse")]
        System.Threading.Tasks.Task<bool> registerAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/getBalance", ReplyAction="http://tempuri.org/IShopService/getBalanceResponse")]
        double getBalance(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/getBalance", ReplyAction="http://tempuri.org/IShopService/getBalanceResponse")]
        System.Threading.Tasks.Task<double> getBalanceAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/test", ReplyAction="http://tempuri.org/IShopService/testResponse")]
        string test();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/test", ReplyAction="http://tempuri.org/IShopService/testResponse")]
        System.Threading.Tasks.Task<string> testAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/isUsernameUnique", ReplyAction="http://tempuri.org/IShopService/isUsernameUniqueResponse")]
        bool isUsernameUnique(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/isUsernameUnique", ReplyAction="http://tempuri.org/IShopService/isUsernameUniqueResponse")]
        System.Threading.Tasks.Task<bool> isUsernameUniqueAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/login", ReplyAction="http://tempuri.org/IShopService/loginResponse")]
        ShopLibrary.User login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/login", ReplyAction="http://tempuri.org/IShopService/loginResponse")]
        System.Threading.Tasks.Task<ShopLibrary.User> loginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/buyProduct", ReplyAction="http://tempuri.org/IShopService/buyProductResponse")]
        bool buyProduct(int prodid, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/buyProduct", ReplyAction="http://tempuri.org/IShopService/buyProductResponse")]
        System.Threading.Tasks.Task<bool> buyProductAsync(int prodid, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/getUserOwnedProducts", ReplyAction="http://tempuri.org/IShopService/getUserOwnedProductsResponse")]
        ShopLibrary.Product[] getUserOwnedProducts(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopService/getUserOwnedProducts", ReplyAction="http://tempuri.org/IShopService/getUserOwnedProductsResponse")]
        System.Threading.Tasks.Task<ShopLibrary.Product[]> getUserOwnedProductsAsync(int userid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IShopServiceChannel : ShopClient.ShopService.IShopService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShopServiceClient : System.ServiceModel.ClientBase<ShopClient.ShopService.IShopService>, ShopClient.ShopService.IShopService {
        
        public ShopServiceClient() {
        }
        
        public ShopServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ShopServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ShopServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ShopServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ShopLibrary.Product[] getAllProducts() {
            return base.Channel.getAllProducts();
        }
        
        public System.Threading.Tasks.Task<ShopLibrary.Product[]> getAllProductsAsync() {
            return base.Channel.getAllProductsAsync();
        }
        
        public bool register(string username) {
            return base.Channel.register(username);
        }
        
        public System.Threading.Tasks.Task<bool> registerAsync(string username) {
            return base.Channel.registerAsync(username);
        }
        
        public double getBalance(int userid) {
            return base.Channel.getBalance(userid);
        }
        
        public System.Threading.Tasks.Task<double> getBalanceAsync(int userid) {
            return base.Channel.getBalanceAsync(userid);
        }
        
        public string test() {
            return base.Channel.test();
        }
        
        public System.Threading.Tasks.Task<string> testAsync() {
            return base.Channel.testAsync();
        }
        
        public bool isUsernameUnique(string username) {
            return base.Channel.isUsernameUnique(username);
        }
        
        public System.Threading.Tasks.Task<bool> isUsernameUniqueAsync(string username) {
            return base.Channel.isUsernameUniqueAsync(username);
        }
        
        public ShopLibrary.User login(string username, string password) {
            return base.Channel.login(username, password);
        }
        
        public System.Threading.Tasks.Task<ShopLibrary.User> loginAsync(string username, string password) {
            return base.Channel.loginAsync(username, password);
        }
        
        public bool buyProduct(int prodid, int amount) {
            return base.Channel.buyProduct(prodid, amount);
        }
        
        public System.Threading.Tasks.Task<bool> buyProductAsync(int prodid, int amount) {
            return base.Channel.buyProductAsync(prodid, amount);
        }
        
        public ShopLibrary.Product[] getUserOwnedProducts(int userid) {
            return base.Channel.getUserOwnedProducts(userid);
        }
        
        public System.Threading.Tasks.Task<ShopLibrary.Product[]> getUserOwnedProductsAsync(int userid) {
            return base.Channel.getUserOwnedProductsAsync(userid);
        }
    }
}
